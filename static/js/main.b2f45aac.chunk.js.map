{"version":3,"sources":["components/Form/form.jsx","components/List/list.jsx","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","onSubmit","addCourse","type","value","current","onChange","handelChange","CourseList","state","isEdit","toggleState","setState","console","log","updateItem","e","preventDefault","editCourses","index","input","renderCourse","details","name","onClick","deleteCourse","renderUpdateForm","ref","v","defaultValue","this","Component","App","courses","target","push","splice","courseList","map","course","key","className","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NAWeA,EATI,SAACC,GAClB,OACE,0BAAMC,SAAUD,EAAME,WACpB,2BAAOC,KAAK,OAAOC,MAAOJ,EAAMK,QAASC,SAAUN,EAAMO,eACzD,4BAAQJ,KAAK,UAAb,gBCoDSK,E,4MAvDbC,MAAQ,CACNC,QAAQ,G,EAGVC,YAAc,WAAO,IACbD,EAAW,EAAKD,MAAhBC,OACN,EAAKE,SAAS,CACZF,QAASA,IAEXG,QAAQC,IAAIJ,I,EAGdK,WAAa,SAACC,GACZA,EAAEC,iBACF,EAAKjB,MAAMkB,YAAY,EAAKlB,MAAMmB,MAAO,EAAKC,MAAMhB,OACpD,EAAKO,e,EAGPU,aAAe,WACb,OACE,4BACE,8BAAO,EAAKrB,MAAMsB,QAAQC,KAA1B,KACA,4BAAQC,QAAS,kBAAM,EAAKb,gBAA5B,eACA,4BAAQa,QAAS,kBAAM,EAAKxB,MAAMyB,aAAa,EAAKzB,MAAMmB,SAA1D,Y,EAONO,iBAAmB,WACjB,OACE,0BAAMzB,SAAU,EAAKc,YACnB,2BACEZ,KAAK,OACLwB,IAAK,SAACC,GACJ,EAAKR,MAAQQ,GAEfC,aAAc,EAAK7B,MAAMsB,QAAQC,OAEnC,mD,uDAKI,IACFb,EAAWoB,KAAKrB,MAAhBC,OACN,OACE,kBAAC,WAAD,KACGA,EAASoB,KAAKJ,mBAAqBI,KAAKT,oB,GAlDxBU,aC8EVC,G,kNA1EbvB,MAAQ,CACNwB,QAAS,CACP,CAAEV,KAAM,QACR,CAAEA,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,WAEVlB,QAAS,I,EAGXE,aAAe,SAACS,GACd,EAAKJ,SAAS,CACZP,QAASW,EAAEkB,OAAO9B,S,EAGtBF,UAAY,SAACc,GACXA,EAAEC,iBACF,IAAIZ,EAAU,EAAKI,MAAMJ,QACnB4B,EAAY,EAAKxB,MAAjBwB,QACU,KAAZ5B,IACF4B,EAAQE,KAAK,CAAEZ,KAAMlB,IACrBQ,QAAQC,IAAIT,GACZ,EAAKO,SAAS,CACZqB,UACA5B,QAAS,O,EAKfoB,aAAe,SAACN,GACdN,QAAQC,IAAIK,GADY,IAElBc,EAAY,EAAKxB,MAAjBwB,QACNA,EAAQG,OAAOjB,EAAO,GACtB,EAAKP,SAAS,CACZqB,a,EAGJf,YAAc,SAACC,EAAOf,GAAW,IACzB6B,EAAY,EAAKxB,MAAjBwB,QACOA,EAAQd,GACf,KAAWf,EACjB,EAAKQ,SAAS,CACZqB,a,uDAGM,IAAD,OAEDI,EADcP,KAAKrB,MAAjBwB,QACmBK,KAAI,SAACC,EAAQpB,GACtC,OACE,kBAAC,EAAD,CACEM,aAAc,EAAKA,aACnBH,QAASiB,EACTC,IAAKrB,EACLA,MAAOA,EACPD,YAAa,EAAKA,iBAKxB,OACE,6BAASuB,UAAU,OACjB,2CAEA,kBAAC,EAAD,CACElC,aAAcuB,KAAKvB,aACnBL,UAAW4B,KAAK5B,UAChBG,QAASyB,KAAKrB,MAAMJ,UAEtB,4BAAKgC,EAAWK,OAAS,EAAIL,EAAa,+B,GArEhCN,cCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,a","file":"static/js/main.b2f45aac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CourseForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.addCourse}>\r\n      <input type=\"text\" value={props.current} onChange={props.handelChange} />\r\n      <button type=\"submit\">add course</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CourseForm;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nclass CourseList extends Component {\r\n  state = {\r\n    isEdit: false,\r\n  };\r\n\r\n  toggleState = () => {\r\n    let { isEdit } = this.state;\r\n    this.setState({\r\n      isEdit: !isEdit,\r\n    });\r\n    console.log(isEdit);\r\n  };\r\n\r\n  updateItem = (e) => {\r\n    e.preventDefault();\r\n    this.props.editCourses(this.props.index, this.input.value);\r\n    this.toggleState();\r\n  };\r\n\r\n  renderCourse = () => {\r\n    return (\r\n      <li>\r\n        <span>{this.props.details.name} </span>\r\n        <button onClick={() => this.toggleState()}>Edit Course</button>\r\n        <button onClick={() => this.props.deleteCourse(this.props.index)}>\r\n          delete\r\n        </button>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  renderUpdateForm = () => {\r\n    return (\r\n      <form onSubmit={this.updateItem}>\r\n        <input\r\n          type=\"text\"\r\n          ref={(v) => {\r\n            this.input = v;\r\n          }}\r\n          defaultValue={this.props.details.name}\r\n        />\r\n        <button>Update Course</button>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let { isEdit } = this.state;\r\n    return (\r\n      <Fragment>\r\n        {isEdit ? this.renderUpdateForm() : this.renderCourse()}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CourseList;\r\n","import React, { Component } from \"react\";\nimport CourseForm from \"./components/Form/form\";\nimport CourseList from \"./components/List/list\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    courses: [\n      { name: \"HTML\" },\n      { name: \"CSS\" },\n      { name: \"PHP\" },\n      { name: \"Nodejs\" },\n    ],\n    current: \"\",\n  };\n\n  handelChange = (e) => {\n    this.setState({\n      current: e.target.value,\n    });\n  };\n  addCourse = (e) => {\n    e.preventDefault();\n    let current = this.state.current;\n    let { courses } = this.state;\n    if (current !== \"\") {\n      courses.push({ name: current });\n      console.log(current);\n      this.setState({\n        courses,\n        current: \"\",\n      });\n    }\n  };\n\n  deleteCourse = (index) => {\n    console.log(index);\n    let { courses } = this.state;\n    courses.splice(index, 1);\n    this.setState({\n      courses,\n    });\n  };\n  editCourses = (index, value) => {\n    let { courses } = this.state;\n    let course = courses[index];\n    course[\"name\"] = value;\n    this.setState({\n      courses,\n    });\n  };\n  render() {\n    const { courses } = this.state;\n    const courseList = courses.map((course, index) => {\n      return (\n        <CourseList\n          deleteCourse={this.deleteCourse}\n          details={course}\n          key={index}\n          index={index}\n          editCourses={this.editCourses}\n        />\n      );\n    });\n\n    return (\n      <section className=\"App\">\n        <h2>add courses</h2>\n\n        <CourseForm\n          handelChange={this.handelChange}\n          addCourse={this.addCourse}\n          current={this.state.current}\n        />\n        <ul>{courseList.length > 0 ? courseList : \"ther's no item to show\"}</ul>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}